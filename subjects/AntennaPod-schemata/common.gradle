android {
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        vectorDrawables.useSupportLibrary true
        vectorDrawables.generatedDensities = []

        testApplicationId "de.danoeh.antennapod.core.tests"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
            resValue "string", "app_name", "AntennaPod"
        }
        debug {
            resValue "string", "app_name", "AntennaPod Debug"
        }
    }

    packagingOptions {
        resources {
            excludes += ["META-INF/LICENSE.txt",
                         "META-INF/NOTICE.txt",
                         "META-INF/CHANGES",
                         "META-INF/README.md"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    lint {
        disable "GradleDependency"
        checkDependencies true
        warningsAsErrors true
        abortOnError true
        checkGeneratedSources = true
    }

    buildFeatures {
        viewBinding true
    }

    // To generate dependencies for Kadabra
    // Uncomment only to generate dependencies
    /*
    configurations {
        resolvedImplementation.extendsFrom(implementation{
            exclude(module: "core")
            exclude(module: "event")
            exclude(module: "model")
            exclude(module: "net").exclude(module: "common")
            exclude(module: "net").exclude(module: "discovery")
            exclude(module: "net").exclude(module: "ssl")
            exclude(module: "net").exclude(module: "download").exclude(module: "service-interface")
            exclude(module: "net").exclude(module: "sync").exclude(module: "gpoddernet")
            exclude(module: "parser").exclude(module: "feed")
            exclude(module: "parser").exclude(module: "media")
            exclude(module: "playback").exclude(module: "base")
            exclude(module: "playback").exclude(module: "cast")
            exclude(module: "storage").exclude(module: "database")
            exclude(module: "storage").exclude(module: "preferences")
            exclude(module: "ui").exclude(module: "app-start-intent")
            exclude(module: "ui").exclude(module: "common")
            exclude(module: "ui").exclude(module: "glide")
            exclude(module: "ui").exclude(module: "i18n")
            exclude(module: "ui").exclude(module: "png-icons")
            exclude(module: "ui").exclude(module: "statistics")
            }).canBeResolved=true
    }
    task downloadDependencies(type: Copy) {
        from configurations.resolvedImplementation
        into './dependenciesDirectory'
    } */
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed"
        showStandardStreams true
        displayGranularity 2
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint"
    }
}

apply plugin: 'com.github.spotbugs'

spotbugs {
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
    ignoreFailures = true // Handled by printing task
}

gradle.taskGraph.beforeTask { task ->
    if (task.name.toLowerCase().contains('spotbugs')) {
        task.doLast {
            def reportFile = task.project.file("build/reports/spotbugs/playDebug.xml")
            if (!reportFile.exists()) return
            def slurped = new groovy.xml.XmlSlurper().parse(reportFile)

            def foundErrors = false
            slurped['BugInstance'].each { bug ->
                logger.error "[SpotBugs] ${bug['LongMessage']} [${bug.@'type'}]"
                bug['SourceLine'].each { line ->
                    logger.error "[SpotBugs]     ${line['Message']}"
                    foundErrors = true
                }
            }
            if (foundErrors) {
                throw new TaskExecutionException(task,
                        new Exception("SpotBugs violations were found. See output above for details."))
            }
        }
    }
}


// Forcing dependency resolution
/*
configurations.all {
    resolutionStrategy {
        force 'androidx.activity:activity:1.5.1'
        force 'androidx.annotation:annotation-experimental:1.1.0'
        force 'androidx.appcompat:appcompat-resources:1.5.1'
        force 'com.google.android.material:material:1.7.0'
        force 'androidx.preference:preference:1.1.1'
        force 'androidx.appcompat:appcompat:1.5.1'
        force 'androidx.collection:collection:1.1.0'
        force 'org.apache.commons:commons-lang3:3.7'
        force 'androidx.concurrent:concurrent-futures:1.1.0'
        force 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
        force 'androidx.arch.core:core-common:2.2.0'
        force 'androidx.test:core:1.5.0'
        force 'androidx.viewpager2:viewpager2:1.1.0-beta01'
        force 'androidx.lifecycle:lifecycle-common:2.6.1'
        force 'androidx.lifecycle:lifecycle-livedata-core:2.6.1'
        force 'androidx.lifecycle:lifecycle-livedata-core-ktx:2.6.1'
        force 'androidx.lifecycle:lifecycle-process:2.6.1'
        force 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
        force 'androidx.lifecycle:lifecycle-service:2.6.1'
        force 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
        force 'androidx.drawerlayout:drawerlayout:1.1.1'
        force 'androidx.customview:customview:1.1.0'
        force 'com.google.android.gms:play-services-base:18.0.1'
        force 'androidx.core:core:1.5.0'
        force 'androidx.documentfile:documentfile:1.0.1'
        force 'androidx.fragment:fragment:1.5.5'
        force 'org.hamcrest:hamcrest-core:2.2'
        force 'com.google.code.findbugs:jsr305:3.0.2'
        force 'org.hamcrest:hamcrest-library:2.2'
        force 'junit:junit:4.13.2'
        force 'org.jetbrains.kotlin:kotlin-stdlib-common:1.8.10'
        force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10'
        force 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.6.1'
        force 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
        force 'androidx.media:media:1.4.3'
        force 'androidx.test:monitor:1.6.0'
        force 'com.squareup.moshi:moshi:1.7.0'
        force 'com.squareup.okhttp3:okhttp:3.12.10'
        force 'com.squareup.okio:okio:1.17.5'
        force 'io.reactivex.rxjava2:rxjava:2.2.6'
        force 'androidx.savedstate:savedstate-ktx:1.2.1'
        force 'androidx.savedstate:savedstate:1.2.1'
        force 'androidx.sqlite:sqlite-framework:2.1.0'
        force 'androidx.sqlite:sqlite:2.1.0'
        force 'androidx.startup:startup-runtime:1.1.1'
        force 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
        force 'androidx.databinding:viewbinding:7.4.1'
    }
}*/
